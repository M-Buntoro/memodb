// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/memodb/memodb.go

// Package memodb is a generated GoMock package.
package memodb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemoDBInterface is a mock of MemoDBInterface interface.
type MockMemoDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMemoDBInterfaceMockRecorder
}

// MockMemoDBInterfaceMockRecorder is the mock recorder for MockMemoDBInterface.
type MockMemoDBInterfaceMockRecorder struct {
	mock *MockMemoDBInterface
}

// NewMockMemoDBInterface creates a new mock instance.
func NewMockMemoDBInterface(ctrl *gomock.Controller) *MockMemoDBInterface {
	mock := &MockMemoDBInterface{ctrl: ctrl}
	mock.recorder = &MockMemoDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoDBInterface) EXPECT() *MockMemoDBInterfaceMockRecorder {
	return m.recorder
}

// CreateNewMemo mocks base method.
func (m *MockMemoDBInterface) CreateNewMemo(memoname string, memost MemoStructure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewMemo", memoname, memost)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewMemo indicates an expected call of CreateNewMemo.
func (mr *MockMemoDBInterfaceMockRecorder) CreateNewMemo(memoname, memost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewMemo", reflect.TypeOf((*MockMemoDBInterface)(nil).CreateNewMemo), memoname, memost)
}

// Insert mocks base method.
func (m *MockMemoDBInterface) Insert(memoname string, field map[string]FieldValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", memoname, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockMemoDBInterfaceMockRecorder) Insert(memoname, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMemoDBInterface)(nil).Insert), memoname, field)
}
